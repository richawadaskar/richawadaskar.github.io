{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","server_url","signed_token","sse","App","props","loginSuccessful","setState","showLogin","showChatRoom","showFailedLogin","EventSource","onmessage","e","console","log","data","addEventListener","user_list","user_join","user_part","new_message","server_disconnect","server_status","loginFailed","state","messages","users","bind","online_user_list","JSON","parse","this","close","new_user","push","unique_user_list","Set","message_list","format_event","uid","lastEventId","parted_user","i","length","splice","text","event_name","str","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","date_format","className","hidden","userList","messageList","React","Component","ChatRoomTitle","Compose","user_msg","document","getElementById","value","xhr","XMLHttpRequest","url","open","setRequestHeader","onload","response","status","send","type","id","name","onClick","submitClicked","LoginPage","validateLogin","username","password","msg","for","MessageList","scrollToBottom","messagesEnd","scrollIntoView","behavior","map","elm","index","key","style","float","clear","ref","el","UserList","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.985b8f10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\n\nvar server_url = \"http://chat.cs291.com/\"\nvar signed_token = \"\"\nvar sse = null\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {showLogin: true, showChatRoom: false, showFailedLogin: false, messages: [], users: []}\n    this.user_list = this.user_list.bind(this)\n    this.user_join = this.user_join.bind(this)\n    this.user_part = this.user_part.bind(this)\n    this.new_message = this.new_message.bind(this)\n    this.server_disconnect = this.server_disconnect.bind(this)\n    this.server_status = this.server_status.bind(this)\n  }\n\n  loginSuccessful = (signed_token) => {\n    this.setState({showLogin: false, showChatRoom: true, showFailedLogin: false})\n    const url = server_url + \"/stream/\" + signed_token\n    sse = new EventSource(url);\n    sse.onmessage = function(e) {\n      console.log(\"event received.\")\n      console.log(e.data);\n    }\n\n    sse.addEventListener(\"Users\", e => this.user_list(e))\n    sse.addEventListener(\"Join\", e => this.user_join(e))\n    sse.addEventListener(\"Part\", e => this.user_part(e))\n    sse.addEventListener(\"Message\", e => this.new_message(e))\n    sse.addEventListener(\"Disconnect\", e => this.server_disconnect(e))\n    sse.addEventListener(\"ServerStatus\", e => this.server_status(e))\n  }\n\n  user_list(e) {\n    console.log(\"User List Receivd\")\n    console.log(e)\n    const online_user_list = JSON.parse(e.data)[\"users\"]\n    this.setState({users: online_user_list})\n  }\n\n  server_disconnect(e) {\n    console.log(\"Server Disconnect Received\")\n    console.log(e)\n    if(sse){\n      console.log(\"going to close the sse stream.\")\n      sse.close()\n    }\n    this.setState({showLogin: true, showChatRoom: false, showFailedLogin: false, messages: [], users: []})\n  }\n\n  user_join(e) {\n    console.log(\"User Join Received\")\n    console.log(e)\n    const new_user = JSON.parse(e.data)[\"user\"]\n    console.log(\"new user\")\n    console.log(new_user)\n    var user_list = this.state.users\n    user_list.push(new_user)\n    let unique_user_list = [...new Set(user_list)];\n    var message_list = this.state.messages\n    message_list.push(this.format_event(JSON.parse(e.data), \"Join\"))\n    this.setState({users: unique_user_list, messages: message_list})\n  }\n\n  new_message(e) {\n    console.log(\"New Message Receivd\")\n\n    var new_message = JSON.parse(e.data)\n    console.log(new_message)\n    var message_list = this.state.messages\n    const uid = e.lastEventId\n    console.log(\"uid of last_event_id\")\n    console.log(uid)\n\n    message_list.push(this.format_event(new_message, \"Message\"))\n    console.log(message_list)\n    this.setState({messages: message_list})\n  }\n\n  user_part(e) {\n    console.log(\"User Part Receivd\")\n    console.log(e)\n    const parted_user = JSON.parse(e.data)[\"user\"]\n    console.log(parted_user)\n    var user_list = this.state.users\n    for( var i = 0; i < user_list.length; i++){\n       if ( user_list[i] == parted_user) {\n         user_list.splice(i, 1);\n       }\n    }\n    var new_message = JSON.parse(e.data)\n    var message_list = this.state.messages\n    message_list.push(this.format_event(JSON.parse(e.data), \"Part\"))\n\n    console.log(\"new User list\")\n    console.log(user_list)\n    this.setState({users: user_list, messages: message_list})\n  }\n\n  server_status(e) {\n    console.log(\"Server Status Receivd\")\n    console.log(e)\n    var new_message = JSON.parse(e.data)\n    var message_list = this.state.messages\n    message_list.push(this.format_event(new_message, \"SERVER_STATUS\"))\n    this.setState({messages: message_list})\n  }\n\n  format_event(text, event_name) {\n    console.log(\"formatting event: \")\n    console.log(text)\n    const date = date_format(text[\"created\"])\n    var str = \"\" + date + \": \"\n    if (event_name == \"Join\") {\n      str += \" JOIN \" + text[\"user\"]\n    } else if (event_name == \"Part\") {\n      str += \" PART \" + text[\"user\"]\n    } else if (event_name == \"SERVER_STATUS\" || text[\"status\"]) {\n      str += \"(SERVER_STATUS) \" + text[\"status\"]\n    } else {\n      str += \"(\" + text[\"user\"] + \") \" + text[\"message\"]\n    }\n    return str\n  }\n\n  loginFailed = () => {\n    this.setState({showFailedLogin: true})\n  }\n\n  componentWillUnmount() {\n    if(sse){\n      sse.close()\n    }\n  }\n\n  render() {\n    console.log(\"rendering application\")\n    console.log(\"current value of users is: \" + this.state.users)\n    return (\n      <div className=\"App\">\n        <ChatRoomTitle/>\n        {this.state.showLogin ? <LoginPage loginSuccessful={this.loginSuccessful} loginFailed={this.loginFailed}/> : null}\n        {this.state.showFailedLogin ? <p><b>Login Failed</b></p>: null}\n        <div className=\"ChatRoom\" hidden={!this.state.showChatRoom}>\n          <div className=\"ChatRoomBody\">\n            <UserList userList={this.state.users}/>\n            <MessageList messageList={this.state.messages}/>\n          </div>\n          <Compose/>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ChatRoomTitle extends React.Component {\n  constructor() {\n    super()\n  }\n\n  render() {\n    return (\n      <header>\n        <h1>Chat Room</h1>\n      </header>\n    )\n  }\n}\n\nclass Compose extends React.Component {\n  constructor() {\n    super()\n  }\n\n  submitClicked() {\n    console.log(\"Submit button was clicked.\")\n    const user_msg = document.getElementById(\"composeInputBox\").value\n    console.log(user_msg)\n    document.getElementById(\"composeInputBox\").value = \"\"\n\n    // hit server with new user message.\n    const xhr = new XMLHttpRequest()\n    const url = server_url + \"/message\"\n    xhr.open('POST', url)\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.setRequestHeader('Authorization', 'Bearer ' + signed_token)\n\n    // xhr.onreadystatechange = printOutput;\n    xhr.onload = function () {\n      console.log(\"response received from serverr: \")\n      console.log(xhr.response)\n\n      // re render UI if message was successfully posted.\n      if(xhr.status === 201){\n        console.log(\"message was posted.\")\n      } else if(xhr.status === 403){\n        console.log(\"Signed token is not valid\")\n      } else if(xhr.status === 422) {\n        console.log(\"Message sent was blank.\")\n      }\n    }\n    xhr.send(\"message=\" + user_msg)\n\n  }\n\n  render() {\n    // this should be the box at the bottom that allows users to post messages\n    return (\n      <div className=\"compose\">\n        <input type=\"text\" id=\"composeInputBox\" name=\"userMessage\"/>\n        <input type=\"submit\" value=\"Send Message\" onClick={this.submitClicked}/>\n      </div>\n    )\n  }\n}\n\nclass LoginPage extends React.Component {\n  constructor(props) {\n    super(props)\n    console.log(props)\n    this.props = props\n    console.log(this.props)\n  }\n\n  validateLogin = () => {\n\n    console.log(\"validating login information\")\n    console.log(\"this.props\")\n    console.log(this.props)\n\n    const username = document.getElementById(\"userrr\").value;\n    const password = document.getElementById(\"passss\").value;\n    server_url = document.getElementById(\"serverurll\").value\n\n    // hit the server endpoint here.\n    const xhr = new XMLHttpRequest()\n    const url = server_url + \"/login\"\n    xhr.open('POST', url)\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\n    const props = this.props\n\n    // xhr.onreadystatechange = printOutput;\n    xhr.onload = function () {\n      console.log(\"response received from serverr: \")\n      console.log(xhr.response)\n\n      // re render UI if login is successful.\n      if(xhr.status === 201){\n        console.log(\"login was successful\")\n        signed_token = JSON.parse(xhr.response)[\"token\"]\n        props.loginSuccessful(signed_token)\n        // sse = new SSE(signed_token)\n      } else {\n        console.log(\"Login failed\")\n        props.loginFailed()\n      }\n    }\n\n    const msg = 'username=' + username + '&password=' + password;\n    console.log(msg);\n    xhr.send(msg)\n  }\n\n  render() {\n    const element = (<div className=\"login\">\n      <form>\n        <label for=\"serverUrl\">ChatServer:</label>\n        <input id=\"serverurll\" type=\"text\" name=\"chatserver\"/><br></br>\n        <label for=\"username\">Username:</label>\n        <input id=\"userrr\" type=\"text\" name=\"username\"/><br></br>\n        <label for=\"password\">Password:</label>\n        <input id=\"passss\" type=\"password\" name=\"password\"/><br></br>\n        <button type=\"button\" onClick={this.validateLogin}>Login</button>\n      </form>\n    </div>)\n\n    return element\n  }\n}\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  render() {\n    console.log(\"rendering messageList\")\n    console.log(\"Messages are\")\n    console.log(this.props.messageList)\n    return (\n      <div className=\"messageList\">\n        <h3 className=\"sectionTitle\">Messages</h3>\n        <div className=\"messages\">\n          {\n            this.props.messageList.map((elm, index) =>\n              <li key={index}> {elm} </li>\n            )\n          }\n        </div>\n        <div style={{ float:\"left\", clear: \"both\" }}\n          ref={(el) => { this.messagesEnd = el; }}>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass UserList extends React.Component {\n  constructor(props) {\n      super(props)\n  }\n\n  render() {\n    console.log(\"rendering user list.\")\n    console.log(\"Users are\")\n    console.log(this.props.userList)\n    return (\n      <div className=\"userList\">\n        <h3 className=\"sectionTitle\">Online</h3>\n        <div className=\"usersOnline\">\n          {this.props.userList.map((text, index) =>\n            <li key={index}> {text} </li>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction date_format(timestamp) {\n    var date = new Date(timestamp * 1000);\n    return (\n        date.toLocaleDateString(\"en-US\") +\n        \" \" +\n        date.toLocaleTimeString(\"en-US\")\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}